style().

  .bar {
    fill: steelblue;
  }

  .bar:hover {
    fill: brown;
  }

  .axis {
    font: 10px sans-serif;
  }

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .x.axis path {
    display:none;
  }

script(type="text/javascript").

  // dimensions of map
  var w = 700;
  var h = 300;
  var allData = [];

  // scale map to fit
  var projection = d3.geo.albersUsa()
                    .translate([w/2, h/2])

                    // max number for determining scale ratio
                    .scale([500]);

  var path = d3.geo.path().projection(projection);

  var svg = d3.select('body').append('svg').attr({width: w, height: h});

  d3.json('javascript/us.json', function(json){
    svg.selectAll('path')
      .data(json.features)
      .enter()
      .append('path')
      .attr('d', path)
      .attr('fill', '#666666');
  });


  function createPopulationBar(data) {
    console.log('population bar data ', data);
    var dataset = [];
    
    for (var i = 0; i < data.length; i++) {
      dataset.push({era: data[i].era, pop: data[i].data['population']});
    }

    var margin = {top: 20, right: 20, bottom: 30, left: 50};
    var width = 500 - margin.left - margin.right;
    var height = 300 - margin.top - margin.bottom;
    var padding = 10;
    //- var x = d3.scale.linear()
    //-         .range([0, width]);
    var years = dataset.map(function(d){ return d.era; });
    var populations = dataset.map(function(d){ return d.pop; });
    console.log(populations);

    var xScale = d3.scale.linear()
                  //- .domain(dataset.map(function(d){ return d.era; }))
                  //- .domain([0, d3.max(domain)])
                  .domain([d3.min(years), d3.max(years)])
                  .range([0, width]);


    var yScale = d3.scale.linear()
                  .domain([0, d3.max(populations)])
                  .range([height, 0]);

    var xAxis = d3.svg.axis()
                  .scale(xScale)
                  .orient('bottom')
                  .tickFormat(function(data){ return data + "s"; })
                  .ticks(4);

    var yAxis = d3.svg.axis()
                  .scale(yScale)
                  .orient('left')
                  .ticks(10);

    var svg = d3.select('body').append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                  .attr('transform', 'translate(' + margin.left + "," + margin.top + ")");
    svg.append('g')
        .attr('class', 'x axis')
        .attr('transform', 'translate(0, ' + height + ")")
        .call(xAxis);

    svg.append('g')
          .attr('class', 'y axis')
          .call(yAxis)
        .append('text')
          .attr('transform', 'rotate(-90)')
          .attr('y', 6)
          .attr('dy', '.71em')
          .style('text-anchor', 'end')
          .text('Population');
    // todo fix bar padding between each value 
    svg.selectAll('.bar')
        .data(dataset)
        .enter()
        .append('rect')
          .attr('class', 'bar')
          .attr('x', function(d){ return xScale(d.era); })
          .attr('width', width / dataset.length - 60)
          .attr('y', function(d){ return yScale(d.pop); })
          .attr('height', function(d){ console.log(height - yScale(d.pop)); return height - yScale(d.pop); });
  }


  d3.csv('javascript/youth_data/YA_1980_010.csv', function(error, eight){

    d3.csv('javascript/youth_data/YA_1990_010.csv', function(error, nine){

      d3.csv('javascript/youth_data/YA_2000_010.csv', function(error, ten){

        d3.csv('javascript/youth_data/YA_2009_2013_010.csv', function(error, eleven){

          console.log("1980s ", eight);
          console.log("1990s ", nine);
          console.log("2000s",  ten);
          console.log("2010s",  eleven);

          allData.push({era: 1980, data: eight[0]});
          allData.push({era: 1990, data: nine[0]});
          allData.push({era: 2000, data: ten[0]});
          allData.push({era: 2010, data: eleven[0]});

          createPopulationBar(allData);

        });

      });

    });

  });
  
